/*
 * This file is generated by jOOQ.
 */
package com.walker.jooq.jooqdemo.model.tables;


import com.walker.jooq.jooqdemo.model.Exchange;
import com.walker.jooq.jooqdemo.model.Indexes;
import com.walker.jooq.jooqdemo.model.Keys;
import com.walker.jooq.jooqdemo.model.tables.records.OilCardRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 油卡
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OilCard extends TableImpl<OilCardRecord> {

    private static final long serialVersionUID = -2110764197;

    /**
     * The reference instance of <code>exchange.oil_card</code>
     */
    public static final OilCard OIL_CARD = new OilCard();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OilCardRecord> getRecordType() {
        return OilCardRecord.class;
    }

    /**
     * The column <code>exchange.oil_card.id</code>. 主键UUID
     */
    public final TableField<OilCardRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "主键UUID");

    /**
     * The column <code>exchange.oil_card.card_no</code>. 卡号
     */
    public final TableField<OilCardRecord, String> CARD_NO = createField("card_no", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "卡号");

    /**
     * The column <code>exchange.oil_card.card_password</code>. 卡密
     */
    public final TableField<OilCardRecord, String> CARD_PASSWORD = createField("card_password", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "卡密");

    /**
     * The column <code>exchange.oil_card.money</code>. 金额
     */
    public final TableField<OilCardRecord, String> MONEY = createField("money", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "金额");

    /**
     * The column <code>exchange.oil_card.company</code>. 所属公司
     */
    public final TableField<OilCardRecord, String> COMPANY = createField("company", org.jooq.impl.SQLDataType.VARCHAR(11).nullable(false), this, "所属公司");

    /**
     * The column <code>exchange.oil_card.batch</code>. 批次
     */
    public final TableField<OilCardRecord, String> BATCH = createField("batch", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "批次");

    /**
     * The column <code>exchange.oil_card.status</code>. 状态：0-未兑换 1-已兑换
     */
    public final TableField<OilCardRecord, Byte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "状态：0-未兑换 1-已兑换");

    /**
     * The column <code>exchange.oil_card.create_time</code>. 创建时间
     */
    public final TableField<OilCardRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "创建时间");

    /**
     * The column <code>exchange.oil_card.release_time</code>. 发放时间
     */
    public final TableField<OilCardRecord, Timestamp> RELEASE_TIME = createField("release_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "发放时间");

    /**
     * The column <code>exchange.oil_card.expire_time</code>. 过期时间
     */
    public final TableField<OilCardRecord, Timestamp> EXPIRE_TIME = createField("expire_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "过期时间");

    /**
     * Create a <code>exchange.oil_card</code> table reference
     */
    public OilCard() {
        this(DSL.name("oil_card"), null);
    }

    /**
     * Create an aliased <code>exchange.oil_card</code> table reference
     */
    public OilCard(String alias) {
        this(DSL.name(alias), OIL_CARD);
    }

    /**
     * Create an aliased <code>exchange.oil_card</code> table reference
     */
    public OilCard(Name alias) {
        this(alias, OIL_CARD);
    }

    private OilCard(Name alias, Table<OilCardRecord> aliased) {
        this(alias, aliased, null);
    }

    private OilCard(Name alias, Table<OilCardRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("油卡"));
    }

    public <O extends Record> OilCard(Table<O> child, ForeignKey<O, OilCardRecord> key) {
        super(child, key, OIL_CARD);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Exchange.EXCHANGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.OIL_CARD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OilCardRecord> getPrimaryKey() {
        return Keys.KEY_OIL_CARD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OilCardRecord>> getKeys() {
        return Arrays.<UniqueKey<OilCardRecord>>asList(Keys.KEY_OIL_CARD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OilCard as(String alias) {
        return new OilCard(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OilCard as(Name alias) {
        return new OilCard(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OilCard rename(String name) {
        return new OilCard(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OilCard rename(Name name) {
        return new OilCard(name, null);
    }
}
