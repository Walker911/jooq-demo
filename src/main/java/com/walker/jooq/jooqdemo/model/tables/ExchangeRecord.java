/*
 * This file is generated by jOOQ.
 */
package com.walker.jooq.jooqdemo.model.tables;


import com.walker.jooq.jooqdemo.model.Exchange;
import com.walker.jooq.jooqdemo.model.Indexes;
import com.walker.jooq.jooqdemo.model.Keys;
import com.walker.jooq.jooqdemo.model.tables.records.ExchangeRecordRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 兑换记录
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExchangeRecord extends TableImpl<ExchangeRecordRecord> {

    private static final long serialVersionUID = 2144834674;

    /**
     * The reference instance of <code>exchange.exchange_record</code>
     */
    public static final ExchangeRecord EXCHANGE_RECORD = new ExchangeRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExchangeRecordRecord> getRecordType() {
        return ExchangeRecordRecord.class;
    }

    /**
     * The column <code>exchange.exchange_record.id</code>. 主键UUID
     */
    public final TableField<ExchangeRecordRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "主键UUID");

    /**
     * The column <code>exchange.exchange_record.order_no</code>. 订单号
     */
    public final TableField<ExchangeRecordRecord, String> ORDER_NO = createField("order_no", org.jooq.impl.SQLDataType.VARCHAR(50), this, "订单号");

    /**
     * The column <code>exchange.exchange_record.mobile</code>. 手机号
     */
    public final TableField<ExchangeRecordRecord, String> MOBILE = createField("mobile", org.jooq.impl.SQLDataType.VARCHAR(50), this, "手机号");

    /**
     * The column <code>exchange.exchange_record.total_interests</code>. 兑换权益总量
     */
    public final TableField<ExchangeRecordRecord, BigDecimal> TOTAL_INTERESTS = createField("total_interests", org.jooq.impl.SQLDataType.DECIMAL(12, 2), this, "兑换权益总量");

    /**
     * The column <code>exchange.exchange_record.actual_interests</code>. 实际到账权益
     */
    public final TableField<ExchangeRecordRecord, BigDecimal> ACTUAL_INTERESTS = createField("actual_interests", org.jooq.impl.SQLDataType.DECIMAL(12, 2), this, "实际到账权益");

    /**
     * The column <code>exchange.exchange_record.remark</code>. 兑换失败的原因
     */
    public final TableField<ExchangeRecordRecord, String> REMARK = createField("remark", org.jooq.impl.SQLDataType.VARCHAR(50), this, "兑换失败的原因");

    /**
     * The column <code>exchange.exchange_record.exchange_status</code>. 兑换状态：0 失败  成功
     */
    public final TableField<ExchangeRecordRecord, Integer> EXCHANGE_STATUS = createField("exchange_status", org.jooq.impl.SQLDataType.INTEGER, this, "兑换状态：0 失败  成功");

    /**
     * The column <code>exchange.exchange_record.exchange_type</code>. 兑换方式 0-油卡，1-红包
     */
    public final TableField<ExchangeRecordRecord, Byte> EXCHANGE_TYPE = createField("exchange_type", org.jooq.impl.SQLDataType.TINYINT, this, "兑换方式 0-油卡，1-红包");

    /**
     * The column <code>exchange.exchange_record.exchange_time</code>. 兑换时间
     */
    public final TableField<ExchangeRecordRecord, Timestamp> EXCHANGE_TIME = createField("exchange_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "兑换时间");

    /**
     * Create a <code>exchange.exchange_record</code> table reference
     */
    public ExchangeRecord() {
        this(DSL.name("exchange_record"), null);
    }

    /**
     * Create an aliased <code>exchange.exchange_record</code> table reference
     */
    public ExchangeRecord(String alias) {
        this(DSL.name(alias), EXCHANGE_RECORD);
    }

    /**
     * Create an aliased <code>exchange.exchange_record</code> table reference
     */
    public ExchangeRecord(Name alias) {
        this(alias, EXCHANGE_RECORD);
    }

    private ExchangeRecord(Name alias, Table<ExchangeRecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExchangeRecord(Name alias, Table<ExchangeRecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("兑换记录"));
    }

    public <O extends Record> ExchangeRecord(Table<O> child, ForeignKey<O, ExchangeRecordRecord> key) {
        super(child, key, EXCHANGE_RECORD);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Exchange.EXCHANGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EXCHANGE_RECORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ExchangeRecordRecord> getPrimaryKey() {
        return Keys.KEY_EXCHANGE_RECORD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ExchangeRecordRecord>> getKeys() {
        return Arrays.<UniqueKey<ExchangeRecordRecord>>asList(Keys.KEY_EXCHANGE_RECORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExchangeRecord as(String alias) {
        return new ExchangeRecord(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExchangeRecord as(Name alias) {
        return new ExchangeRecord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExchangeRecord rename(String name) {
        return new ExchangeRecord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExchangeRecord rename(Name name) {
        return new ExchangeRecord(name, null);
    }
}
