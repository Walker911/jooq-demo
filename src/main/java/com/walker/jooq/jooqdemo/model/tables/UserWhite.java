/*
 * This file is generated by jOOQ.
 */
package com.walker.jooq.jooqdemo.model.tables;


import com.walker.jooq.jooqdemo.model.Exchange;
import com.walker.jooq.jooqdemo.model.Indexes;
import com.walker.jooq.jooqdemo.model.Keys;
import com.walker.jooq.jooqdemo.model.tables.records.UserWhiteRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 领卡人白名单
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserWhite extends TableImpl<UserWhiteRecord> {

    private static final long serialVersionUID = -2032098331;

    /**
     * The reference instance of <code>exchange.user_white</code>
     */
    public static final UserWhite USER_WHITE = new UserWhite();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserWhiteRecord> getRecordType() {
        return UserWhiteRecord.class;
    }

    /**
     * The column <code>exchange.user_white.id</code>. 主键UUID
     */
    public final TableField<UserWhiteRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "主键UUID");

    /**
     * The column <code>exchange.user_white.mobile</code>. 手机号
     */
    public final TableField<UserWhiteRecord, String> MOBILE = createField("mobile", org.jooq.impl.SQLDataType.VARCHAR(11), this, "手机号");

    /**
     * The column <code>exchange.user_white.name</code>. 姓名
     */
    public final TableField<UserWhiteRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(50), this, "姓名");

    /**
     * The column <code>exchange.user_white.interests</code>. 权益
     */
    public final TableField<UserWhiteRecord, String> INTERESTS = createField("interests", org.jooq.impl.SQLDataType.VARCHAR(50), this, "权益");

    /**
     * The column <code>exchange.user_white.original_interests</code>. 原始权益-只读，不能修改
     */
    public final TableField<UserWhiteRecord, BigDecimal> ORIGINAL_INTERESTS = createField("original_interests", org.jooq.impl.SQLDataType.DECIMAL(15, 2), this, "原始权益-只读，不能修改");

    /**
     * The column <code>exchange.user_white.actual_interests</code>. 实际到账权益
     */
    public final TableField<UserWhiteRecord, BigDecimal> ACTUAL_INTERESTS = createField("actual_interests", org.jooq.impl.SQLDataType.DECIMAL(15, 2), this, "实际到账权益");

    /**
     * The column <code>exchange.user_white.create_time</code>. 发放时间
     */
    public final TableField<UserWhiteRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "发放时间");

    /**
     * The column <code>exchange.user_white.expire_time</code>. 失效时间
     */
    public final TableField<UserWhiteRecord, Timestamp> EXPIRE_TIME = createField("expire_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "失效时间");

    /**
     * The column <code>exchange.user_white.status</code>. 权益状态：0-失效，1-收益（有效），2兑换
     */
    public final TableField<UserWhiteRecord, Byte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "权益状态：0-失效，1-收益（有效），2兑换");

    /**
     * The column <code>exchange.user_white.exchange_status</code>. 兑换状态：0-未兑换，1-已兑换
     */
    public final TableField<UserWhiteRecord, Byte> EXCHANGE_STATUS = createField("exchange_status", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "兑换状态：0-未兑换，1-已兑换");

    /**
     * The column <code>exchange.user_white.exchange_time</code>. 兑换时间
     */
    public final TableField<UserWhiteRecord, Timestamp> EXCHANGE_TIME = createField("exchange_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "兑换时间");

    /**
     * The column <code>exchange.user_white.parent_id</code>. 父权益id
     */
    public final TableField<UserWhiteRecord, String> PARENT_ID = createField("parent_id", org.jooq.impl.SQLDataType.VARCHAR(255), this, "父权益id");

    /**
     * Create a <code>exchange.user_white</code> table reference
     */
    public UserWhite() {
        this(DSL.name("user_white"), null);
    }

    /**
     * Create an aliased <code>exchange.user_white</code> table reference
     */
    public UserWhite(String alias) {
        this(DSL.name(alias), USER_WHITE);
    }

    /**
     * Create an aliased <code>exchange.user_white</code> table reference
     */
    public UserWhite(Name alias) {
        this(alias, USER_WHITE);
    }

    private UserWhite(Name alias, Table<UserWhiteRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserWhite(Name alias, Table<UserWhiteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("领卡人白名单"));
    }

    public <O extends Record> UserWhite(Table<O> child, ForeignKey<O, UserWhiteRecord> key) {
        super(child, key, USER_WHITE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Exchange.EXCHANGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_WHITE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserWhiteRecord> getPrimaryKey() {
        return Keys.KEY_USER_WHITE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserWhiteRecord>> getKeys() {
        return Arrays.<UniqueKey<UserWhiteRecord>>asList(Keys.KEY_USER_WHITE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserWhite as(String alias) {
        return new UserWhite(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserWhite as(Name alias) {
        return new UserWhite(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserWhite rename(String name) {
        return new UserWhite(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserWhite rename(Name name) {
        return new UserWhite(name, null);
    }
}
