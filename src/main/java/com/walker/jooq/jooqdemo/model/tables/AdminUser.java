/*
 * This file is generated by jOOQ.
 */
package com.walker.jooq.jooqdemo.model.tables;


import com.walker.jooq.jooqdemo.model.Exchange;
import com.walker.jooq.jooqdemo.model.Indexes;
import com.walker.jooq.jooqdemo.model.Keys;
import com.walker.jooq.jooqdemo.model.tables.records.AdminUserRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdminUser extends TableImpl<AdminUserRecord> {

    private static final long serialVersionUID = -1825950906;

    /**
     * The reference instance of <code>exchange.admin_user</code>
     */
    public static final AdminUser ADMIN_USER = new AdminUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminUserRecord> getRecordType() {
        return AdminUserRecord.class;
    }

    /**
     * The column <code>exchange.admin_user.id</code>.
     */
    public final TableField<AdminUserRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>exchange.admin_user.account</code>. 账号
     */
    public final TableField<AdminUserRecord, String> ACCOUNT = createField("account", org.jooq.impl.SQLDataType.VARCHAR(255), this, "账号");

    /**
     * The column <code>exchange.admin_user.password</code>. 密码
     */
    public final TableField<AdminUserRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(255), this, "密码");

    /**
     * The column <code>exchange.admin_user.salt</code>. 盐
     */
    public final TableField<AdminUserRecord, String> SALT = createField("salt", org.jooq.impl.SQLDataType.VARCHAR(255), this, "盐");

    /**
     * The column <code>exchange.admin_user.create_time</code>. 创建时间
     */
    public final TableField<AdminUserRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "创建时间");

    /**
     * The column <code>exchange.admin_user.update_time</code>. 修改时间
     */
    public final TableField<AdminUserRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "修改时间");

    /**
     * The column <code>exchange.admin_user.phone</code>. 手机号
     */
    public final TableField<AdminUserRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.VARCHAR(255), this, "手机号");

    /**
     * The column <code>exchange.admin_user.nick_name</code>. 昵称/名称
     */
    public final TableField<AdminUserRecord, String> NICK_NAME = createField("nick_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "昵称/名称");

    /**
     * The column <code>exchange.admin_user.status</code>. 0无效，1有效
     */
    public final TableField<AdminUserRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER, this, "0无效，1有效");

    /**
     * Create a <code>exchange.admin_user</code> table reference
     */
    public AdminUser() {
        this(DSL.name("admin_user"), null);
    }

    /**
     * Create an aliased <code>exchange.admin_user</code> table reference
     */
    public AdminUser(String alias) {
        this(DSL.name(alias), ADMIN_USER);
    }

    /**
     * Create an aliased <code>exchange.admin_user</code> table reference
     */
    public AdminUser(Name alias) {
        this(alias, ADMIN_USER);
    }

    private AdminUser(Name alias, Table<AdminUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private AdminUser(Name alias, Table<AdminUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AdminUser(Table<O> child, ForeignKey<O, AdminUserRecord> key) {
        super(child, key, ADMIN_USER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Exchange.EXCHANGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ADMIN_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AdminUserRecord> getPrimaryKey() {
        return Keys.KEY_ADMIN_USER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AdminUserRecord>> getKeys() {
        return Arrays.<UniqueKey<AdminUserRecord>>asList(Keys.KEY_ADMIN_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AdminUser as(String alias) {
        return new AdminUser(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AdminUser as(Name alias) {
        return new AdminUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminUser rename(String name) {
        return new AdminUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminUser rename(Name name) {
        return new AdminUser(name, null);
    }
}
