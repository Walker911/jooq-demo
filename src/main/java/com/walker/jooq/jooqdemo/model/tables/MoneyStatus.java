/*
 * This file is generated by jOOQ.
 */
package com.walker.jooq.jooqdemo.model.tables;


import com.walker.jooq.jooqdemo.model.Exchange;
import com.walker.jooq.jooqdemo.model.Indexes;
import com.walker.jooq.jooqdemo.model.Keys;
import com.walker.jooq.jooqdemo.model.tables.records.MoneyStatusRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 面值余量提醒
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MoneyStatus extends TableImpl<MoneyStatusRecord> {

    private static final long serialVersionUID = -1516393779;

    /**
     * The reference instance of <code>exchange.money_status</code>
     */
    public static final MoneyStatus MONEY_STATUS = new MoneyStatus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MoneyStatusRecord> getRecordType() {
        return MoneyStatusRecord.class;
    }

    /**
     * The column <code>exchange.money_status.id</code>.
     */
    public final TableField<MoneyStatusRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>exchange.money_status.money</code>. 面值  50-200张 100-100张
     */
    public final TableField<MoneyStatusRecord, String> MONEY = createField("money", org.jooq.impl.SQLDataType.VARCHAR(255), this, "面值  50-200张 100-100张");

    /**
     * The column <code>exchange.money_status.status</code>. 面值余量状态 0不足  1充足
     */
    public final TableField<MoneyStatusRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER, this, "面值余量状态 0不足  1充足");

    /**
     * Create a <code>exchange.money_status</code> table reference
     */
    public MoneyStatus() {
        this(DSL.name("money_status"), null);
    }

    /**
     * Create an aliased <code>exchange.money_status</code> table reference
     */
    public MoneyStatus(String alias) {
        this(DSL.name(alias), MONEY_STATUS);
    }

    /**
     * Create an aliased <code>exchange.money_status</code> table reference
     */
    public MoneyStatus(Name alias) {
        this(alias, MONEY_STATUS);
    }

    private MoneyStatus(Name alias, Table<MoneyStatusRecord> aliased) {
        this(alias, aliased, null);
    }

    private MoneyStatus(Name alias, Table<MoneyStatusRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("面值余量提醒"));
    }

    public <O extends Record> MoneyStatus(Table<O> child, ForeignKey<O, MoneyStatusRecord> key) {
        super(child, key, MONEY_STATUS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Exchange.EXCHANGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MONEY_STATUS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MoneyStatusRecord> getPrimaryKey() {
        return Keys.KEY_MONEY_STATUS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MoneyStatusRecord>> getKeys() {
        return Arrays.<UniqueKey<MoneyStatusRecord>>asList(Keys.KEY_MONEY_STATUS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MoneyStatus as(String alias) {
        return new MoneyStatus(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MoneyStatus as(Name alias) {
        return new MoneyStatus(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MoneyStatus rename(String name) {
        return new MoneyStatus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MoneyStatus rename(Name name) {
        return new MoneyStatus(name, null);
    }
}
